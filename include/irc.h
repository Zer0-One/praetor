/*
* This source file is part of praetor, a free and open-source IRC bot,
* designed to be robust, portable, and easily extensible.
*
* Copyright (c) 2015-2017 David Zero
* All rights reserved.
*
* The following code is licensed for use, modification, and redistribution
* according to the terms of the Revised BSD License. The text of this license
* can be found in the "LICENSE" file bundled with this source distribution.
*/

#ifndef PRAETOR_IRC
#define PRAETOR_IRC

#include <jansson.h>

/**
 * The maximum size of an IRC message.
 */
#define MSG_SIZE_MAX 512
#define MSG_BODY_MAX 510

/**
 * Attempts a graceful disconnect from an IRC network. This function is
 * guaranteed to disconnect praetor from the given IRC network by performing an
 * IRC \c QUIT, and terminating the socket connection; it does so gracefully if
 * possible, and ungracefully if necessary. This function also removes the
 * socket file descriptor belonging to the given network from the global
 * watchlist.
 * 
 * \param network A string indexing a networkinfo struct in the rc_network hash
 *                table.
 *
 * \return 0 on a successful disconnect (graceful or not).
 * \return -1 if no configuration could be found for the given network handle.
 */
//int irc_disconnect(const char* network);

/**
 * Calls irc_disconnect() for every network with a mapping in rc_network_sock.
 * The value specified with the "quit_msg" configuration option is used as the
 * IRC \c QUIT message in each network for which the option was specified.
 *
 * \return 0 on success.
 * \return -1 on failure to gracefully disconnect from any network.
 */
//int irc_disconnect_all();

/**
 * Joins a channel on the given IRC network. If \c channel is a valid handle in
 * the channels hash table for the given network, praetor will connect
 * according to the information for the corresponding channel struct (channel
 * password, etc.).  Otherwise, praetor simply attempts to perform a JOIN using
 * \c channel as the channel name.
 * 
 * \param network A string indexing a networkinfo struct in the rc_network hash
 *                table.
 * \param channel One of either: a string indexing a channel struct in the
 *                channels hash table, or the name of a valid IRC channel.
 *
 * \return 0 on a successful channel join
 * \return -1 on an unsuccessful join
 */
//int irc_channel_join(const char* network, const char* channel);

/**
 * Parts a channel on the given IRC network.
 * 
 * \param network A string indexing a networkinfo struct in the rc_network hash
 *                table.
 * \param channel A string indexing a channel struct in the channels hash
 *                table.
 *
 * \return Something
 */
//int irc_channel_part(const char* network, const char* channel);

/**
 * Processes an IRC message for the presence of a PING, and sends the
 * appropriate PONG response back to the originating server. Only the first \c
 * len characters of the message are processed.
 *
 * This function will only fail if the socket connection dies before the PONG
 * response can be sent.
 *
 * \param network A string indexing a networkinfo struct in the rc_network hash
 *                table.
 * \param buf     A buffer containing a complete (newline-terminated) IRC message
 *                to parse.
 * \param len     The number of characters in the message contained in \c buf,
 *                including the terminating newline character.
 *
 * \return 0 on success.
 * \return -1 on failure.
 */
//int irc_handle_ping(const char* network, const char* buf, size_t len);

/**
 * Transforms a JSON message generated by a plugin into one or more IRC
 * messages, suitable to be sent as-is via IRC.
 *
 * \param json_msg A pointer to the JSON message to be converted.
 *
 * \return The number of messages in the returned array.
 * \return 0 on failure.
 */
//size_t irc_msg_from_json(json_t* json_msg, char*** irc_msg);

/**
 * Transforms one or more messages received from an IRC network into a JSON
 * message, suitable to be sent as-is to a plugin.
 *
 * \param json_msg Something
 * \param irc_msg  Something
 * \param len      Something
 *
 * \return 0 on success.
 * \return -1 on failure.
 */
//int irc_json_from_msg(json_t* json_msg, char*** irc_msg, size_t len);

/**
 * Registers a connection with an IRC server by performing a PASS/NICK/USER
 * sequence (See RFC 2812, Section 3.1 for details).
 *
 * This function does not check to see if the server responded with an error.
 * It only ensures that the message was sent.
 * 
 * \param network A string indexing a struct networkinfo in the rc_network hash
 *                table.
 *
 * \return 0 on success.
 * \return -1 on failure.
 */
int irc_register_connection(const char* network);

int irc_register_connection_all();

/**
 * Builds an IRC message from the given format string.
 *
 * This function returns dynamically-allocated memory that should be freed by
 * the caller.
 *
 * \param fmt A printf() format string describing an IRC message.
 *
 * \return On success, returns a pointer to dynamically-allocated memory which
 *         should be freed when it is no longer needed.
 * \return On failure, returns NULL.
 */
char* irc_msg_build(const char* fmt, ...);

/**
 * Scans the message buffer belonging to the given network for a complete IRC
 * message. If a message is found, it is copied to \c buf .
 *
 * \param network A string indexing a struct networkinfo in the rc_network hash
 *                table.
 * \param buf     A buffer in which the next complete IRC message will be
 *                stored.
 * \param len     The length of \c buf.
 *
 * \return 0 on success.
 * \return On failure to find a complete message, or if the given buffer is too
 * small to hold the next message, this function returns -1.
 */
int irc_msg_recv(const char* network, char* buf, size_t len);

#endif
